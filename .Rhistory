Corn<-Sleuth3::ex0915 # Corn Yield Example -------------------------------------
pairs(Corn[,c('Rainfall','Year','Yield')], upper.panel=NULL)
MLR1<-lm(Yield ~ Rainfall + I(Rainfall^2), data=Corn) # Model with ONLY rainfall
scatter.smooth(Corn$Year, residuals(MLR1)) # Scatterplot with loess smoother
pairs(Corn[,c('Rainfall','Year','Yield')])
DF<-Sleuth3::ex1122  # Deforestation Example -----------------------------------
DF$ldebt<-log(DF$Debt)
DF$lpop<-log(DF$Pop)
DF$ldf<-log(DF$Deforest)
pairs(DF[,c('ldebt','lpop','ldf')], upper.panel=NULL)
SLR.pop<-lm(ldf ~ lpop, data=DF)   # Population ONLY model
scatter.smooth(DF$ldebt, residuals(SLR.pop))
BWt<-Sleuth3::case0902  # Brain Weight Example ---------------------------------
BWt$lBrain<-log(BWt$Brain)     # Brain size = response
BWt$lBody <-log(BWt$Body)      # Body size
BWt$lGest <-log(BWt$Gestation) # Gestation length
pairs(BWt[,c('lBody','lGest','lBrain')], upper.panel=NULL)
SLR1<-lm(lBrain ~ lBody, data=BWt) # Model with ONLY body size
scatter.smooth(BWt$lGest, residuals(SLR1))
Inc<-Sleuth3::ex1223 # Education vs Income Example -----------------------------
Inc$lInc <- log(Inc$Income2005)
pairs(Inc[,c('lInc','Educ','AFQT','Gender','MotherEd','FatherEd')], lower.panel=NULL)
MLR2<-lm(lInc ~ Educ * AFQT, data=Inc) # Our original model
boxplot(residuals(MLR2) ~ Inc$Gender)   # An example with a categorical variable
# After controlling for Education and IQ, looks like there still may be some
#  signal with gender
par(mfrow=c(1,2))
scatter.smooth(Inc$MotherEd, residuals(MLR2))
scatter.smooth(Inc$FatherEd, residuals(MLR2))
Corn<-Sleuth3::ex0915 # Corn Yield Example -------------------------------------
pairs(Corn[,c('Rainfall','Year','Yield')], upper.panel=NULL)
lm.full<-lm(Yield ~ Rainfall*Year + I(Rainfall^2), data=Corn)
t(t(coef(lm.full)))  # Estimates and names of coefficients
## Partial residual = Observed Response - (Predicted response WITHOUT Var1)
pres.rain<-Corn$Yield - model.matrix(lm.full)[,c(1,3)] %*% coef(lm.full)[c(1,3)]
pres.year<-Corn$Yield - model.matrix(lm.full)[,c(1,2,4)] %*% coef(lm.full)[c(1,2,4)]
par(mfrow=c(1,2))
scatter.smooth(Corn$Rainfall, pres.rain)
scatter.smooth(Corn$Year, pres.year)
View(lm.full)
model.matrix(lm.full)[,c(1,3)]
pres.rain
DF<-Sleuth3::ex1122  # Deforestation Example -----------------------------------
DF$ldebt<-log(DF$Debt)
DF$lpop<-log(DF$Pop)
DF$ldf<-log(DF$Deforest)
pairs(DF[,c('ldebt','lpop','ldf')], upper.panel=NULL)
lm.full<-lm(ldf ~ ldebt + lpop, data=DF)
t(coef(lm.full))
t(t(coef(lm.full)))
coef(lm.full)
pres.debt<-DF$ldf - model.matrix(lm.full)[,c(1,3)] %*% coef(lm.full)[c(1,3)]
pres.pop <-DF$ldf - model.matrix(lm.full)[,c(1,2)] %*% coef(lm.full)[c(1,2)]
par(mfrow=c(1,2))
scatter.smooth(DF$ldebt, pres.debt)
scatter.smooth(DF$lpop, pres.pop)
# Another word of caution:We've got to be careful which variable we use on the x-axis.
# With the wrong variable (i.e., the one we removed to create the p.res), we may
#  see a pattern that looks sort of like what we expected based on coefficients,
#  but backwards.  In this case, lpop and ldebt are strong correlated themselves,
#  so looking at the wrong partial residuals, we see SORT OF the pattern we expect
#  from MLR results, but with lpop as the weak negative relationship.
scatter.smooth(DF$lpop, pres.debt)  # WRONG!
scatter.smooth(DF$ldebt, pres.pop)
BWt<-Sleuth3::case0902  # Brain Weight Example ---------------------------------
BWt$lBrain<-log(BWt$Brain)     # Brain size = response
BWt$lBody <-log(BWt$Body)      # Body size
BWt$lGest <-log(BWt$Gestation) # Gestation length
pairs(BWt[,c('lBody','lGest','lBrain')], upper.panel=NULL)
lm.full<-lm(lBrain ~ lBody + lGest, data=BWt)
pres.body<-BWt$lBrain - model.matrix(lm.full)[,c(1,2)] %*% coef(lm.full)[c(1,2)]
pres.gest <-BWt$lBrain - model.matrix(lm.full)[,c(1,3)] %*% coef(lm.full)[c(1,3)]
par(mfcol=c(1,2))
scatter.smooth(BWt$lBody, pres.body)
scatter.smooth(BWt$lGest, pres.gest)
par(mfrow())
par(mfrow
))
par(mfrow)
par(mfrow=0)
par(mfrow=1)
par(mfrow=c())
library(ggplot2)
dispersal.data<-Sleuth3::ex1124
str(dispersal.data)
dispersal.data$logDist=log(dispersal.data$MaxDist)
dispersal.data$logMass=log(dispersal.data$BodyMass)
fit.logdisp=lm(logDist~logMass*Type,data=dispersal.data)
par(mfrow=c(1,4))
#plot(fit.logdisp)
fit.logdisp.add=lm(logDist~logMass+Type,data=dispersal.data)
anova(fit.logdisp.add,fit.logdisp)
View(dispersal.data)
ggplot(dispersal.data,aes=(x=BodyMass,y=MaxDist))+geom_point()+stat_smooth(se=Type)
ggplot(dispersal.data,aes(x=BodyMass,y=MaxDist))+geom_point()+stat_smooth(se=Type)
ggplot(dispersal.data,aes(x=BodyMass,y=MaxDist))+stat_smooth(se=Type)+geom_point()
Corn<-Sleuth3::ex0915 # Corn Yield Example -------------------------------------
pairs(Corn[,c('Rainfall','Year','Yield')], upper.panel=NULL)
lm.corn<-lm(Yield ~ Rainfall*I(Year-1890)+I(Rainfall^2), data=Corn)
summary(lm.corn)
### We can predict data to help visualize relationships ------------------------
# Data to predict onto = grid of all possible combinations of x-values
#                       includes values not necessarily seen in observed set
newX<-expand.grid(Year = 1890:1930,
Rainfall = seq(6,18, length.out=100))
# Calculate CIs from SE
fit<-predict(lm.corn, newdata=newX, se.fit=T)
k<-length(coef(lm.corn))           # Number of coefficients
fmult<-sqrt(2*qf(0.95, k, fit$df)) # Scheffe multiplier
sigma(lm.corn) == fit$residual.scale  # predict() for SE returns ResSD
lm.corn$df == fit$df                  #                 and DF from model
newXY<-data.frame(newX, Yield=fit$fit,
CI.lwr=fit$fit - fmult*fit$se.fit,
CI.upr=fit$fit + fmult*fit$se.fit,
PI.lwr=fit$fit - fmult*sqrt(fit$res^2 + fit$se.fit^2),
PI.upr=fit$fit - fmult*sqrt(fit$res^2 + fit$se.fit^2))
ggplot(subset(newXY, Year %in% c(1895,1925)),
aes(x=Rainfall, y=Yield, col=Year, fill=Year))+
geom_ribbon(aes(ymin=CI.lwr, ymax=CI.upr, group=factor(Year)),
col=NA, alpha=0.1)+
geom_line(aes(linetype=factor(Year)), size=1)+
geom_point(data=Corn)
ggplot(dispersal.data,aes(x=BodyMass,y=MaxDist,col=Type))+geom_point()
ggplot(dispersal.data,aes(x=logMass,y=logDist,col=Type))+geom_point()
last_plot()+geom_line()
ggplot(dispersal.data,aes(x=logMass,y=logDist,col=Type))+geom_point()+geom_line(size=1)
ggplot(dispersal.data,aes(x=logMass,y=logDist,col=Type))+geom_point()+stat_smooth()
#   - Here, I'm using facets to show how the interaction causes the Rainfall
#     relationship to change as year increases (i.e., without slices) but now
#     each line may only correspond with a single observation.
ggplot(newXY, aes(x=Rainfall, y=Yield, col=Year))+
geom_ribbon(aes(ymin=CI.lwr, ymax=CI.upr, fill=Year), col=NA, alpha=0.1)+
geom_line(size=1)+
geom_point(data=Corn)+facet_wrap(~Year)
# Partial residuals can help "line up" our observations with the
#  MLR relationship, but the way the Sleuth talks about them only
#  works in limited circumstances.
summary(lm.corn)$coef
#                         Estimate Std. Error t value Pr(>|t|)
#(Intercept)             -17.22860    9.80870  -1.756 0.088287
#Rainfall                  6.43111    1.65927   3.876 0.000478
#I(Year - 1890)            1.00118    0.25545   3.919 0.000423
#I(Rainfall^2)            -0.18625    0.07198  -2.588 0.014257
#Rainfall:I(Year - 1890)  -0.08064    0.02345  -3.439 0.001599
wch<-c(1,3)
partial.res<-Corn$Yield - model.matrix(lm.corn)[,wch] %*% coef(lm.corn)[wch]
# After adjusting for year, can I see the relationship with Rainfall
#  among the partial residuals?
ggplot(data.frame(Corn, partial.res), aes(x=Rainfall, y=partial.res))+
stat_smooth(method='loess', se=F, size=0.5, linetype='dashed')+
geom_point()
# The idea is that the partial residuals *might* help us visualize
#  whether the functional form of our MLR relationship is sufficient
median(Corn$Year)  # Set variable at its mean or median value
# Add MLR fit
last_plot() + geom_ribbon(data=subset(newXY, Year==1908),
aes(x=Rainfall, y=Yield, ymax=CI.upr, ymin=CI.lwr), col=NA, alpha=0.1)+
geom_line(data=subset(newXY, Year==1908),
aes(x=Rainfall, y=Yield), col='blue')
# BUT: we need to watch out for "leakage" of non-linear relationships.
#  Basically, you want to do a fair amount of trellis type plots to make sure
library(ggplot2); theme_set(theme_bw())
library(ggpubr)
library(dplyr); library(tidyr)
options(show.signif.stars=FALSE, width=1000)
### Review of diagnostic plots -------------------------------------------------
Derby<-Sleuth3::ex0920
lm.derby<-lm(Speed ~ poly(Year,2)*Conditions, data=Derby)
summary(lm.derby)
### Compare diagnostic plots with original scatterplot with model fit
dev.new(width=15, height=8)
layout(cbind(c(1,1),matrix(2:5, nrow=2)))
par(pty='s', cex.main=2)
plot(Speed ~ Year, col=Derby$Conditions, data=Derby,
pch=16, main='Original Scatterplot')
Derby$fit<-predict(lm.derby)
lines(fit~Year, data=subset(Derby, Conditions=='Fast'), col='black', lwd=2)
lines(fit~Year, data=subset(Derby, Conditions=='Slow'), col='red', lwd=2)
legend(x=1980, y=34, col=c('black','red'), lwd=2, legend=c('Fast','Slow'))
par(pty='m', mar=c(5,5,3,1))
plot(lm.derby)
# What's going on in a Residuals vs Leverage plot - EXPLORE!
par(mfrow=c(1,2))
plot(lm.derby, which=5)  # Residuals vs Leverage diagnostic plot
plot(hatvalues(lm.derby), rstandard(lm.derby)) # Same thing by hand
# RULE OF THUMB:
#   Leverage > 2*mean(Lev) are "weird"
2*mean(hatvalues(lm.derby))
### Understanding Case-Influence statistics (e.g., Cook's Distance)
# RvsL vs Original Scatterplot
par(mfrow=c(1,2))
plot(lm.derby, which=5)
identify(hatvalues(lm.derby), rstandard(lm.derby)) # Identify "weird" observations
plot(Speed ~ Year, col=Derby$Conditions, data=Derby,
pch=16, main='Original Scatterplot')
with(Derby[c(4,13,94,99,109),],
text(Year, Speed, label=c(4,13,94,99,109))) # Label our 3 "weird" pts
# Add model fit to help understand why these are "weird"
Derby$fit<-predict(lm.derby)
lines(fit~Year, data=subset(Derby, Conditions=='Fast'), col='black', lwd=2)
lines(fit~Year, data=subset(Derby, Conditions=='Slow'), col='red', lwd=2)
# Linear version - restricting x-values to range with linear pattern
ggplot(Derby, aes(x=Yr, y=Speed, col=C))+geom_point()
ggplot(subset(Derby, Yr < 75), aes(x=Yr, y=Speed, col=C))+geom_point()
last_plot()+stat_smooth(method='lm', se=F)
## Confidence interval on slope (Lab 10: Kentucky Derby Winning Speeeds) -------
Derby<-Sleuth2::ex0920
Derby$Yr<-Derby$Year-min(Derby$Year)
Derby$C <-factor(Derby$Condition, levels=c('slow','good','fast'))
# Linear version - restricting x-values to range with linear pattern
ggplot(Derby, aes(x=Yr, y=Speed, col=C))+geom_point()
ggplot(subset(Derby, Yr < 75), aes(x=Yr, y=Speed, col=C))+geom_point()
last_plot()+stat_smooth(method='lm', se=F)
ggplot(dispersal.data,aes(x=logMass,y=logDist,col=Type))+geom_point()+stat_smooth(method='lm',se=F)
rm(list = ls(all. names = TRUE))
rm(list = ls(all.names = TRUE))
gc()
dispersal.data<-Sleuth3::ex1124
str(dispersal.data)
dispersal.data$logDist=log(dispersal.data$MaxDist)
dispersal.data$logMass=log(dispersal.data$BodyMass)
ggplot(dispersal.data,aes(x=logMass,y=logDist,col=Type))+geom_point()+stat_smooth(method='lm',se=F)
fit.logdisp=lm(logDist~logMass*Type,data=dispersal.data)
par(mfrow=c(1,4))
#plot(fit.logdisp)
fit.logdisp.add=lm(logDist~logMass+Type,data=dispersal.data)
anova(fit.logdisp.add,fit.logdisp)
summary(dispersal.data)
summary(fit.logdisp)
ggplot(dispersal.data,aes(x=logMass,y=logDist,col=Type))+geom_point()+stat_smooth(method='lm',se=F)
lm(logDist~logMass+I(Type),data=dispersal.data)
summary(lm(logDist~logMass+I(Type),data=dispersal.data)
)
help("ifelse")
dispersal.data$Type=ifelse(dispersal.data$Type=="H","H","C/O")
ggplot(dispersal.data,aes(x=logMass,y=logDist,col=Type))+geom_point()+stat_smooth(method='lm',se=F)
fit.logdisp=lm(logDist~logMass*Type,data=dispersal.data)
summary(fit.logdisp)
fit.logdisp.add=lm(logDist~logMass+Type,data=dispersal.data)
summary(fit.logdisp.add)
anova(fit.logdisp.add,fit.logdisp)
dispersal.data$Type=ifelse(dispersal.data$Type=="H","H","C/O")
ggplot(dispersal.data,aes(x=logMass,y=logDist,col=Type))+geom_point()+stat_smooth(method='lm',se=F)
fit.logdisp=lm(logDist~logMass*Type,data=dispersal.data)
summary(fit.logdisp)
plot(fit.logdisp)
fit.logdisp.add=lm(logDist~logMass+Type,data=dispersal.data)
summary(fit.logdisp.add)
fit.logdisp.add
anova(fit.logdisp.add,fit.logdisp)
help(pairs)
pairs(dispersal.data)
Corn<-Sleuth3::ex0915 # Corn Yield Example -------------------------------------
pairs(Corn[,c('Rainfall','Year','Yield')], upper.panel=NULL)
View(Corn)
DF<-Sleuth3::ex1122  # Deforestation Example -----------------------------------
DF$ldebt<-log(DF$Debt)
DF$lpop<-log(DF$Pop)
DF$ldf<-log(DF$Deforest)
pairs(DF[,c('ldebt','lpop','ldf')], upper.panel=NULL)
View(dispersal.data)
pairs(dispersal.data[,c(2,3,4)])
pairs(dispersal.data[,c(2,3)])
dispersal.data<-Sleuth3::ex1124
str(dispersal.data)
pairs(dispersal.data[,c(2,3)])
dispersal.data$logDist=log(dispersal.data$MaxDist)
dispersal.data$logMass=log(dispersal.data$BodyMass)
ggplot(dispersal.data,aes(x=logMass,y=logDist,col=Type))+geom_point()+stat_smooth(method='lm',se=F)
fit.logdisp=lm(logDist~logMass*Type,data=dispersal.data)
summary(fit.logdisp)
par(mfrow=c(1,4))
plot(fit.logdisp)
fit.logdisp.add=lm(logDist~logMass+Type,data=dispersal.data)
plot(fit.logdisp.add)
anova(fit.logdisp.add,fit.logdisp)
dispersal.data$Type=ifelse(dispersal.data$Type=="H","H","C/O")
ggplot(dispersal.data,aes(x=logMass,y=logDist,col=Type))+geom_point()+stat_smooth(method='lm',se=F)
fit.logdisp.add2=lm(logDist~logMass+Type,data=dispersal.data)
summary(fit.logdisp.add2)
plot(fit.logdisp.add2)
anova(fit.logdisp.add,fit.logdisp.add2)
dispersal.data<-Sleuth3::ex1124
str(dispersal.data)
pairs(dispersal.data[,c(2,3)])
dispersal.data$logDist=log(dispersal.data$MaxDist)
dispersal.data$logMass=log(dispersal.data$BodyMass)
ggplot(dispersal.data,aes(x=logMass,y=logDist,col=Type))+geom_point()+stat_smooth(method='lm',se=F)
fit.logdisp=lm(logDist~logMass*Type,data=dispersal.data)
summary(fit.logdisp)
par(mfrow=c(1,4))
plot(fit.logdisp)
fit.logdisp.add=lm(logDist~logMass+Type,data=dispersal.data)
summary(fit.logdisp.add)
plot(fit.logdisp.add)
anova(fit.logdisp.add,fit.logdisp)
dispersal.data$Type=ifelse(dispersal.data$Type=="H","H","C/O")
ggplot(dispersal.data,aes(x=logMass,y=logDist,col=Type))+geom_point()+stat_smooth(method='lm',se=F)
fit.logdisp.add2=lm(logDist~logMass+Type,data=dispersal.data)
summary(fit.logdisp.add2)
plot(fit.logdisp.add2)
anova(fit.logdisp.add,fit.logdisp.add2)
dispersal.data<-Sleuth3::ex1124
str(dispersal.data)
pairs(dispersal.data[,c(2,3)])
dispersal.data$logDist=log(dispersal.data$MaxDist)
dispersal.data$logMass=log(dispersal.data$BodyMass)
ggplot(dispersal.data,aes(x=logMass,y=logDist,col=Type))+geom_point()+stat_smooth(method='lm',se=F)
fit.logdisp=lm(logDist~logMass*Type,data=dispersal.data)
summary(fit.logdisp)
par(mfrow=c(1,4))
plot(fit.logdisp)
fit.logdisp.add=lm(logDist~logMass+Type,data=dispersal.data)
summary(fit.logdisp.add)
plot(fit.logdisp.add)
anova(fit.logdisp.add,fit.logdisp)
dispersal.data$Type.1=ifelse(dispersal.data$Type=="H","H","C/O")
ggplot(dispersal.data,aes(x=logMass,y=logDist,col=Type))+geom_point()+stat_smooth(method='lm',se=F)
fit.logdisp.add2=lm(logDist~logMass+Type,data=dispersal.data)
summary(fit.logdisp.add2)
plot(fit.logdisp.add2)
anova(fit.logdisp.add,fit.logdisp.add2)
dispersal.data$Type.1=ifelse(dispersal.data$Type=="H","H","C/O")
ggplot(dispersal.data,aes(x=logMass,y=logDist,col=Type.1))+geom_point()+stat_smooth(method='lm',se=F)
fit.logdisp.add2=lm(logDist~logMass+Type.1,data=dispersal.data)
summary(fit.logdisp.add2)
plot(fit.logdisp.add2)
anova(fit.logdisp.add,fit.logdisp.add2)
pollution<-Sleuth3::ex1123
str(pollution)
View(pollution)
